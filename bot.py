# –ü—Ä–æ—Ç–æ—Ç–∏–ø —á–∞—Ç-–±–æ—Ç–∞: –ø–æ–∏—Å–∫ –ø–æ —Å–º—ã—Å–ª—É —Å –ø–æ–º–æ—â—å—é ruBERT –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram

# üîß –£–°–¢–ê–ù–û–í–ö–ê –ë–ò–ë–õ–ò–û–¢–ï–ö (–æ–¥–∏–Ω —Ä–∞–∑):
# pip install transformers scikit-learn torch pandas python-telegram-bot

# üìÑ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:
# - bot.py                 ‚Üê —ç—Ç–æ—Ç —Ñ–∞–π–ª (—á–∞—Ç-–±–æ—Ç)
# - questions.csv          ‚Üê –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –≤ CSV (–¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞: –í–æ–ø—Ä–æ—Å;–û—Ç–≤–µ—Ç)

import torch
import pandas as pd
import numpy as np
from transformers import AutoTokenizer, AutoModel
from sklearn.metrics.pairwise import cosine_similarity
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# üîê –£–°–¢–ê–ù–û–í–ò –°–Æ–î–ê –°–í–û–ô TELEGRAM –¢–û–ö–ï–ù
TELEGRAM_TOKEN = "8156239934:AAFeZX-InTvBNuZHbpO4VpOe3nRhIEJn25A"

# üìò –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—É—é –º–æ–¥–µ–ª—å ruBERT
MODEL_NAME = "ai-forever/ruBert-base"
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
model = AutoModel.from_pretrained(MODEL_NAME)
model.eval()

# üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
csv_path = "questions.csv"  # –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã: –í–æ–ø—Ä–æ—Å;–û—Ç–≤–µ—Ç
try:
    df = pd.read_csv(csv_path, sep=';', quotechar='"')
    if not {'–í–æ–ø—Ä–æ—Å', '–û—Ç–≤–µ—Ç'}.issubset(df.columns):
        raise ValueError("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã '–í–æ–ø—Ä–æ—Å' –∏ '–û—Ç–≤–µ—Ç'")
    knowledge_base = dict(zip(df["–í–æ–ø—Ä–æ—Å"], df["–û—Ç–≤–µ—Ç"]))
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
    knowledge_base = {}

# üìå –§—É–Ω–∫—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞

def get_embedding(text):
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True, max_length=512)
    with torch.no_grad():
        outputs = model(**inputs)
    return outputs.last_hidden_state.mean(dim=1).squeeze().numpy()

# üß† –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
kb_questions = list(knowledge_base.keys())
kb_embeddings = [get_embedding(q) for q in kb_questions] if knowledge_base else []

# üîé –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞

def find_best_match(question, threshold=0.6):
    if not kb_embeddings:
        return None
    question_emb = get_embedding(question)
    sims = cosine_similarity([question_emb], kb_embeddings)[0]
    best_idx = np.argmax(sims)
    best_score = sims[best_idx]
    if best_score < threshold:
        return None
    return knowledge_base[kb_questions[best_idx]]

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    if not knowledge_base:
        await update.message.reply_text("‚ö†Ô∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    answer = find_best_match(user_input)
    if answer:
        await update.message.reply_text(f"ü§ñ {answer}")
    else:
        await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôè")

# üîπ –ö–æ–º–∞–Ω–¥–∞ /start

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π üòä –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ–ª–µ–Ω–∏–µ?' –∏–ª–∏ '–ö–∞–∫ —Å–ª–æ–∂–∏—Ç—å —á–∏—Å–ª–∞?'"
    )

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞

if __name__ == "__main__":
    if not TELEGRAM_TOKEN or "–≤—Å—Ç–∞–≤—å" in TELEGRAM_TOKEN:
        print("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω TELEGRAM_TOKEN.")
    else:
        app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram...")
        app.run_polling()